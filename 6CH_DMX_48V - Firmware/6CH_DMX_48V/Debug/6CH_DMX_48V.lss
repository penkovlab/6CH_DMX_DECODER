
6CH_DMX_48V.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  00000478  0000052c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000478  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800202  00800202  0000062e  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  000006a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b1a  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006e7  00000000  00000000  00001262  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000846  00000000  00000000  00001949  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000070  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00006ad6  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000127  00000000  00000000  00008cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00008dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000023ca  00000000  00000000  00008e15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	21 c0       	rjmp	.+66     	; 0x44 <__ctors_end>
   2:	3b c0       	rjmp	.+118    	; 0x7a <__bad_interrupt>
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	39 c0       	rjmp	.+114    	; 0x7a <__bad_interrupt>
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	37 c0       	rjmp	.+110    	; 0x7a <__bad_interrupt>
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	35 c0       	rjmp	.+106    	; 0x7a <__bad_interrupt>
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	33 c0       	rjmp	.+102    	; 0x7a <__bad_interrupt>
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	31 c0       	rjmp	.+98     	; 0x7a <__bad_interrupt>
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	2f c0       	rjmp	.+94     	; 0x7a <__bad_interrupt>
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	2d c0       	rjmp	.+90     	; 0x7a <__bad_interrupt>
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	2b c0       	rjmp	.+86     	; 0x7a <__bad_interrupt>
  24:	2b c0       	rjmp	.+86     	; 0x7c <__vector_18>
  26:	29 c0       	rjmp	.+82     	; 0x7a <__bad_interrupt>
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	27 c0       	rjmp	.+78     	; 0x7a <__bad_interrupt>
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	25 c0       	rjmp	.+74     	; 0x7a <__bad_interrupt>
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	23 c0       	rjmp	.+70     	; 0x7a <__bad_interrupt>
  34:	de c0       	rjmp	.+444    	; 0x1f2 <__vector_18+0x176>
  36:	52 c0       	rjmp	.+164    	; 0xdc <__vector_18+0x60>
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__vector_18+0x68>
  3a:	67 c0       	rjmp	.+206    	; 0x10a <__vector_18+0x8e>
  3c:	7c c0       	rjmp	.+248    	; 0x136 <__vector_18+0xba>
  3e:	90 c0       	rjmp	.+288    	; 0x160 <__vector_18+0xe4>
  40:	ab c0       	rjmp	.+342    	; 0x198 <__vector_18+0x11c>
  42:	bb c0       	rjmp	.+374    	; 0x1ba <__vector_18+0x13e>

00000044 <__ctors_end>:
  44:	11 24       	eor	r1, r1
  46:	1f be       	out	0x3f, r1	; 63
  48:	cf ef       	ldi	r28, 0xFF	; 255
  4a:	d2 e0       	ldi	r29, 0x02	; 2
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	cd bf       	out	0x3d, r28	; 61

00000050 <__do_copy_data>:
  50:	12 e0       	ldi	r17, 0x02	; 2
  52:	a0 e0       	ldi	r26, 0x00	; 0
  54:	b1 e0       	ldi	r27, 0x01	; 1
  56:	e8 e7       	ldi	r30, 0x78	; 120
  58:	f4 e0       	ldi	r31, 0x04	; 4
  5a:	02 c0       	rjmp	.+4      	; 0x60 <__do_copy_data+0x10>
  5c:	05 90       	lpm	r0, Z+
  5e:	0d 92       	st	X+, r0
  60:	a2 30       	cpi	r26, 0x02	; 2
  62:	b1 07       	cpc	r27, r17
  64:	d9 f7       	brne	.-10     	; 0x5c <__do_copy_data+0xc>

00000066 <__do_clear_bss>:
  66:	22 e0       	ldi	r18, 0x02	; 2
  68:	a2 e0       	ldi	r26, 0x02	; 2
  6a:	b2 e0       	ldi	r27, 0x02	; 2
  6c:	01 c0       	rjmp	.+2      	; 0x70 <.do_clear_bss_start>

0000006e <.do_clear_bss_loop>:
  6e:	1d 92       	st	X+, r1

00000070 <.do_clear_bss_start>:
  70:	a8 31       	cpi	r26, 0x18	; 24
  72:	b2 07       	cpc	r27, r18
  74:	e1 f7       	brne	.-8      	; 0x6e <.do_clear_bss_loop>
  76:	cc d0       	rcall	.+408    	; 0x210 <main>
  78:	fd c1       	rjmp	.+1018   	; 0x474 <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <__vector_18>:
											245,
											250,
											255};

ISR(USART_RX_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	ef 93       	push	r30
  98:	ff 93       	push	r31
	unsigned char status = UCSR0A;										// Get state before data!
  9a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	unsigned char data = UDR0;											// Get data
  9e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

	if (status & (1 << FE0)){											// Check for BREAK
  a2:	84 ff       	sbrs	r24, 4
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <__vector_18+0x34>
		dmx_state = _DMX_BREAK;											// BREAK condition detected
		dmx_slot_number = 0;		
  a6:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <dmx_slot_number+0x1>
  aa:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <dmx_slot_number>
  ae:	16 c0       	rjmp	.+44     	; 0xdc <__vector_18+0x60>
	}	
	
	if (dmx_slot_number > DMX_MAX_ADDRESS) {							// Protection dmx_slot_number overflow
  b0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <dmx_slot_number>
  b4:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <dmx_slot_number+0x1>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	32 e0       	ldi	r19, 0x02	; 2
  bc:	93 07       	cpc	r25, r19
  be:	18 f0       	brcs	.+6      	; 0xc6 <__vector_18+0x4a>
		dmx_state = _DMX_IDLE;											
  c0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <dmx_state>
  c4:	96 c0       	rjmp	.+300    	; 0x1f2 <__vector_18+0x176>
	}
	
	switch (dmx_state){
  c6:	40 91 05 02 	lds	r20, 0x0205	; 0x800205 <dmx_state>
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	48 30       	cpi	r20, 0x08	; 8
  ce:	51 05       	cpc	r21, r1
  d0:	08 f0       	brcs	.+2      	; 0xd4 <__vector_18+0x58>
  d2:	8d c0       	rjmp	.+282    	; 0x1ee <__vector_18+0x172>
  d4:	fa 01       	movw	r30, r20
  d6:	e6 5e       	subi	r30, 0xE6	; 230
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	09 94       	ijmp
		case _DMX_IDLE:													// Wait for next BREAK
		break;
		
		case _DMX_BREAK:
			dmx_state = _DMX_START_CODE;								// The next data byte is the start byte
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <dmx_state>
		break;
  e2:	87 c0       	rjmp	.+270    	; 0x1f2 <__vector_18+0x176>
		
		case _DMX_START_CODE:
			if (data == DMX_DATA_START_CODE){
  e4:	21 11       	cpse	r18, r1
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__vector_18+0x74>
				dmx_state = _DMX_START;									// DMX data start code detected
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <dmx_state>
  ee:	81 c0       	rjmp	.+258    	; 0x1f2 <__vector_18+0x176>
			}
			else if (data == DMX_COMMAND_START_CODE){
  f0:	21 39       	cpi	r18, 0x91	; 145
  f2:	41 f4       	brne	.+16     	; 0x104 <__vector_18+0x88>
				dmx_state = _DMX_COMMAND;								// Command start code detected
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <dmx_state>
				dmx_command_checksum = 0;
  fa:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <dmx_command_checksum+0x1>
  fe:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <dmx_command_checksum>
 102:	77 c0       	rjmp	.+238    	; 0x1f2 <__vector_18+0x176>
			}
			else{
				dmx_state = _DMX_IDLE;									// Wait next BREAK if other start codes
 104:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <dmx_state>
 108:	74 c0       	rjmp	.+232    	; 0x1f2 <__vector_18+0x176>
			}
		break;
		
		case _DMX_START:
			dmx_slot_number++;
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <dmx_slot_number+0x1>
 110:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <dmx_slot_number>
			if (dmx_slot_number == dmx_start_addr){  
 114:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <dmx_start_addr>
 118:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <dmx_start_addr+0x1>
 11c:	84 17       	cp	r24, r20
 11e:	95 07       	cpc	r25, r21
 120:	09 f0       	breq	.+2      	; 0x124 <__vector_18+0xa8>
 122:	67 c0       	rjmp	.+206    	; 0x1f2 <__vector_18+0x176>
				chan_count = 0;											// Now receive first channel
				dmx_data[chan_count++] = data;							// Store received data into DMX data buffer.
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <chan_count>
 12a:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <dmx_data>
				dmx_state = _DMX_RUN;
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <dmx_state>
 134:	5e c0       	rjmp	.+188    	; 0x1f2 <__vector_18+0x176>
			}
		break;
		
		case _DMX_RUN:
			dmx_slot_number++;
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <dmx_slot_number+0x1>
 13c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <dmx_slot_number>
			dmx_data[chan_count++] = data;								// Store received data into DMX data buffer.
 140:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <chan_count>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	8e 0f       	add	r24, r30
 148:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <chan_count>
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ee 5e       	subi	r30, 0xEE	; 238
 150:	fd 4f       	sbci	r31, 0xFD	; 253
 152:	20 83       	st	Z, r18
			if (chan_count >= DMX_NUM_CHANNELS){						// All channels done.
 154:	86 30       	cpi	r24, 0x06	; 6
 156:	08 f4       	brcc	.+2      	; 0x15a <__vector_18+0xde>
 158:	4c c0       	rjmp	.+152    	; 0x1f2 <__vector_18+0x176>
				dmx_state = _DMX_IDLE;									// Wait for next BREAK
 15a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <dmx_state>
 15e:	49 c0       	rjmp	.+146    	; 0x1f2 <__vector_18+0x176>
			}
		break;
		
		case _DMX_COMMAND:
			dmx_command[dmx_slot_number++] = data;
 160:	ac 01       	movw	r20, r24
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <dmx_slot_number+0x1>
 16a:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <dmx_slot_number>
 16e:	fc 01       	movw	r30, r24
 170:	e5 5f       	subi	r30, 0xF5	; 245
 172:	fd 4f       	sbci	r31, 0xFD	; 253
 174:	20 83       	st	Z, r18
			dmx_command_checksum += data;
 176:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <dmx_command_checksum>
 17a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <dmx_command_checksum+0x1>
 17e:	82 0f       	add	r24, r18
 180:	91 1d       	adc	r25, r1
 182:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <dmx_command_checksum+0x1>
 186:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <dmx_command_checksum>
			if (dmx_slot_number == DMX_COMMAND_LENGTH){
 18a:	45 30       	cpi	r20, 0x05	; 5
 18c:	51 05       	cpc	r21, r1
 18e:	89 f5       	brne	.+98     	; 0x1f2 <__vector_18+0x176>
				dmx_state = _DMX_COMMAND_CHECKSUMH;						// All data received. Now getting checksum!
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <dmx_state>
 196:	2d c0       	rjmp	.+90     	; 0x1f2 <__vector_18+0x176>
			}
		break;
		
		case _DMX_COMMAND_CHECKSUMH:
			dmx_command_checksum -= data << 8;
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	32 2f       	mov	r19, r18
 19c:	22 27       	eor	r18, r18
 19e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <dmx_command_checksum>
 1a2:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <dmx_command_checksum+0x1>
 1a6:	82 1b       	sub	r24, r18
 1a8:	93 0b       	sbc	r25, r19
 1aa:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <dmx_command_checksum+0x1>
 1ae:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <dmx_command_checksum>
			dmx_state = _DMX_COMMAND_CHECKSUML;
 1b2:	87 e0       	ldi	r24, 0x07	; 7
 1b4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <dmx_state>
		break;
 1b8:	1c c0       	rjmp	.+56     	; 0x1f2 <__vector_18+0x176>
		
		case _DMX_COMMAND_CHECKSUML:
			dmx_command_checksum -= data;
 1ba:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <dmx_command_checksum>
 1be:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <dmx_command_checksum+0x1>
 1c2:	82 1b       	sub	r24, r18
 1c4:	91 09       	sbc	r25, r1
 1c6:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <dmx_command_checksum+0x1>
 1ca:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <dmx_command_checksum>
			if ((dmx_command_checksum == 0) && (dmx_command[MFID_HI] == MANUFACTURER_ID_HI) && (dmx_command[MFID_LO] == MANUFACTURER_ID_LO)){
 1ce:	89 2b       	or	r24, r25
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <__vector_18+0x16c>
 1d2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <dmx_command>
 1d6:	8f 37       	cpi	r24, 0x7F	; 127
 1d8:	39 f4       	brne	.+14     	; 0x1e8 <__vector_18+0x16c>
 1da:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <dmx_command+0x1>
 1de:	8f 3f       	cpi	r24, 0xFF	; 255
 1e0:	19 f4       	brne	.+6      	; 0x1e8 <__vector_18+0x16c>
				dmx_command_available = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
			}
			dmx_state = _DMX_IDLE;
 1e8:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <dmx_state>
		break;	
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__vector_18+0x176>
			
		default:
			dmx_state = _DMX_IDLE;
 1ee:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <dmx_state>
		break;
	}
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <main>:

int main(void)
{
	
	temp_start_addr = eeprom_read_word(&eep_dmx_start_addr);										// Read DMX address from EEPROM
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	06 d1       	rcall	.+524    	; 0x422 <eeprom_read_word>
 216:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <temp_start_addr+0x1>
 21a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <temp_start_addr>
	
	// Is address in EEPROM valid?
	// If EEPROM is empty, loaded value will be 0, then DMX address check fails - default DMX address from definition is used.
	
	if ((temp_start_addr >= DMX_MIN_ADDRESS) && (temp_start_addr <= DMX_MAX_ADDRESS)){
 21e:	9c 01       	movw	r18, r24
 220:	21 50       	subi	r18, 0x01	; 1
 222:	31 09       	sbc	r19, r1
 224:	21 15       	cp	r18, r1
 226:	32 40       	sbci	r19, 0x02	; 2
 228:	20 f4       	brcc	.+8      	; 0x232 <main+0x22>
		dmx_start_addr = temp_start_addr;															// Load DMX address from EEPROM
 22a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <dmx_start_addr+0x1>
 22e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <dmx_start_addr>
	}
	
    // Port init
	DDRB = (1 << 3) | (1 << 2) | (1 << 1);															// OC2A (PB3), OC1B (PB2), OC1A (PB1)
 232:	8e e0       	ldi	r24, 0x0E	; 14
 234:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << 6) | (1 << 5) | (1 << 3) | (1 << 4);												// OC0A (PD6), OC0B (PD5), OC2B (PD3), DE (PD4)
 236:	88 e7       	ldi	r24, 0x78	; 120
 238:	8a b9       	out	0x0a, r24	; 10
	PORTC = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 5);									// Pull-Up Jumpers
 23a:	8f e2       	ldi	r24, 0x2F	; 47
 23c:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~( 1 << 4 );																			// DE is low - receiver enable
 23e:	5c 98       	cbi	0x0b, 4	; 11
	
	
	unsigned char read_jumpers_state;
	read_jumpers_state = (PINC >> 1) & 3;															// 3 is mask 0b00000011
 240:	86 b1       	in	r24, 0x06	; 6
	
	switch (read_jumpers_state){
 242:	86 95       	lsr	r24
 244:	83 70       	andi	r24, 0x03	; 3
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	59 f0       	breq	.+22     	; 0x260 <main+0x50>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	19 f0       	breq	.+6      	; 0x254 <main+0x44>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	a9 f4       	brne	.+42     	; 0x27c <main+0x6c>
 252:	0d c0       	rjmp	.+26     	; 0x26e <main+0x5e>
		case 3:
			timer_clk_prescaling = 2;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer_clk_prescaling>
			timer2_clk_prescaling = 2;
 25a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer2_clk_prescaling>
		break;
 25e:	13 c0       	rjmp	.+38     	; 0x286 <main+0x76>
		case 2:
			timer_clk_prescaling = 3;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer_clk_prescaling>
			timer2_clk_prescaling = 4;
 266:	84 e0       	ldi	r24, 0x04	; 4
 268:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer2_clk_prescaling>
		break;
 26c:	0c c0       	rjmp	.+24     	; 0x286 <main+0x76>
		case 1:
			timer_clk_prescaling = 4;
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer_clk_prescaling>
			timer2_clk_prescaling = 6;
 274:	86 e0       	ldi	r24, 0x06	; 6
 276:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer2_clk_prescaling>
		break;
 27a:	05 c0       	rjmp	.+10     	; 0x286 <main+0x76>
		default:
			timer_clk_prescaling = 2;
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <timer_clk_prescaling>
			timer2_clk_prescaling = 2;
 282:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer2_clk_prescaling>
		break;		
	}
	
		
	// 8-bit Timer/Counter 0 init
	if (PINC & (1 << 0)) {
 286:	30 9b       	sbis	0x06, 0	; 6
 288:	07 c0       	rjmp	.+14     	; 0x298 <main+0x88>
		TCCR0A |= (1 << COM0A1) | (1 << COM0A0);
 28a:	84 b5       	in	r24, 0x24	; 36
 28c:	80 6c       	ori	r24, 0xC0	; 192
 28e:	84 bd       	out	0x24, r24	; 36
		TCCR0A |= (1 << COM0B1) | (1 << COM0B0);
 290:	84 b5       	in	r24, 0x24	; 36
 292:	80 63       	ori	r24, 0x30	; 48
 294:	84 bd       	out	0x24, r24	; 36
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <main+0x94>
	}else{
		TCCR0A |= (1 << COM0A1);
 298:	84 b5       	in	r24, 0x24	; 36
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	84 bd       	out	0x24, r24	; 36
		TCCR0A |= (1 << COM0B1);
 29e:	84 b5       	in	r24, 0x24	; 36
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	84 bd       	out	0x24, r24	; 36
	}
		
	TCCR0A |= (1 << WGM00);																			// Phase correct PWM
 2a4:	84 b5       	in	r24, 0x24	; 36
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= timer_clk_prescaling;
 2aa:	95 b5       	in	r25, 0x25	; 37
 2ac:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer_clk_prescaling>
 2b0:	89 2b       	or	r24, r25
 2b2:	85 bd       	out	0x25, r24	; 37

	// 16-bit Timer/Counter 1 init
	if (PINC & (1<<0)) {
 2b4:	30 9b       	sbis	0x06, 0	; 6
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <main+0xba>
		TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
 2b8:	e0 e8       	ldi	r30, 0x80	; 128
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	80 6c       	ori	r24, 0xC0	; 192
 2c0:	80 83       	st	Z, r24
		TCCR1A |= (1 << COM1B1) | (1 << COM1B0);
 2c2:	80 81       	ld	r24, Z
 2c4:	80 63       	ori	r24, 0x30	; 48
 2c6:	80 83       	st	Z, r24
 2c8:	08 c0       	rjmp	.+16     	; 0x2da <main+0xca>
	}else{
		TCCR1A |= (1 << COM1A1);
 2ca:	e0 e8       	ldi	r30, 0x80	; 128
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	80 83       	st	Z, r24
		TCCR1A |= (1 << COM1B1);
 2d4:	80 81       	ld	r24, Z
 2d6:	80 62       	ori	r24, 0x20	; 32
 2d8:	80 83       	st	Z, r24
	}
		
	TCCR1A |= (1 << WGM10);																			// Phase correct PWM 8 bit
 2da:	e0 e8       	ldi	r30, 0x80	; 128
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	80 83       	st	Z, r24
	TCCR1B |= timer_clk_prescaling;
 2e4:	e1 e8       	ldi	r30, 0x81	; 129
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	90 81       	ld	r25, Z
 2ea:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <timer_clk_prescaling>
 2ee:	89 2b       	or	r24, r25
 2f0:	80 83       	st	Z, r24
	
	// 8-bit Timer/Counter 2 init
	if (PINC & (1<<0)) {
 2f2:	30 9b       	sbis	0x06, 0	; 6
 2f4:	09 c0       	rjmp	.+18     	; 0x308 <__stack+0x9>
		TCCR2A |= (1 << COM2A1) | (1 << COM2A0);
 2f6:	e0 eb       	ldi	r30, 0xB0	; 176
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	80 6c       	ori	r24, 0xC0	; 192
 2fe:	80 83       	st	Z, r24
		TCCR2A |= (1 << COM2B1) | (1 << COM2B0);
 300:	80 81       	ld	r24, Z
 302:	80 63       	ori	r24, 0x30	; 48
 304:	80 83       	st	Z, r24
 306:	08 c0       	rjmp	.+16     	; 0x318 <__stack+0x19>
	}else{
		TCCR2A |= (1 << COM2A1);
 308:	e0 eb       	ldi	r30, 0xB0	; 176
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	80 83       	st	Z, r24
		TCCR2A |= (1 << COM2B1);
 312:	80 81       	ld	r24, Z
 314:	80 62       	ori	r24, 0x20	; 32
 316:	80 83       	st	Z, r24
	}
	
	TCCR2A |= (1 << WGM20);																			// Phase correct PWM	
 318:	e0 eb       	ldi	r30, 0xB0	; 176
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	80 83       	st	Z, r24
	TCCR2B |= timer2_clk_prescaling;		
 322:	e1 eb       	ldi	r30, 0xB1	; 177
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer2_clk_prescaling>
 32c:	89 2b       	or	r24, r25
 32e:	80 83       	st	Z, r24
		
	// UART init
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0);															// RX Complete Interrupt Enable , Receiver Enable
 330:	80 e9       	ldi	r24, 0x90	; 144
 332:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (1 << USBS0);											// 8N2
 336:	8e e0       	ldi	r24, 0x0E	; 14
 338:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UBRR0L = 0x03;																					// 250 000 bps
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	sei();																							// Enable interrupts
 342:	78 94       	sei
		OCR0A = dmx_data[2];
		OCR1AL= dmx_data[3];
		OCR1BL= dmx_data[4];
		OCR2A = dmx_data[5];
		}else{
		OCR2B = log_table[dmx_data[0]];
 344:	c2 e1       	ldi	r28, 0x12	; 18
 346:	d2 e0       	ldi	r29, 0x02	; 2
 348:	0f 2e       	mov	r0, r31
 34a:	f4 eb       	ldi	r31, 0xB4	; 180
 34c:	cf 2e       	mov	r12, r31
 34e:	d1 2c       	mov	r13, r1
 350:	f0 2d       	mov	r31, r0
		OCR0B = log_table[dmx_data[1]];
		OCR0A = log_table[dmx_data[2]];
		OCR1AL= log_table[dmx_data[3]];
 352:	0f 2e       	mov	r0, r31
 354:	f8 e8       	ldi	r31, 0x88	; 136
 356:	ef 2e       	mov	r14, r31
 358:	f1 2c       	mov	r15, r1
 35a:	f0 2d       	mov	r31, r0
		OCR1BL= log_table[dmx_data[4]];
 35c:	0a e8       	ldi	r16, 0x8A	; 138
 35e:	10 e0       	ldi	r17, 0x00	; 0
		OCR2A = log_table[dmx_data[5]];
 360:	a3 eb       	ldi	r26, 0xB3	; 179
 362:	b0 e0       	ldi	r27, 0x00	; 0
		}
		// Commands parsing
		if (dmx_command_available){
			dmx_command_available = 0;
			
			switch (dmx_command[COMMAND_TYPE]){
 364:	8b e0       	ldi	r24, 0x0B	; 11
 366:	92 e0       	ldi	r25, 0x02	; 2
	sei();																							// Enable interrupts

    while (1) 
    {
		// Change PWM value
		if (PINC & (1<<3)) {
 368:	33 9b       	sbis	0x06, 3	; 6
 36a:	10 c0       	rjmp	.+32     	; 0x38c <__stack+0x8d>
		OCR2B = dmx_data[0];
 36c:	28 81       	ld	r18, Y
 36e:	f6 01       	movw	r30, r12
 370:	20 83       	st	Z, r18
		OCR0B = dmx_data[1];
 372:	29 81       	ldd	r18, Y+1	; 0x01
 374:	28 bd       	out	0x28, r18	; 40
		OCR0A = dmx_data[2];
 376:	2a 81       	ldd	r18, Y+2	; 0x02
 378:	27 bd       	out	0x27, r18	; 39
		OCR1AL= dmx_data[3];
 37a:	2b 81       	ldd	r18, Y+3	; 0x03
 37c:	f7 01       	movw	r30, r14
 37e:	20 83       	st	Z, r18
		OCR1BL= dmx_data[4];
 380:	2c 81       	ldd	r18, Y+4	; 0x04
 382:	f8 01       	movw	r30, r16
 384:	20 83       	st	Z, r18
		OCR2A = dmx_data[5];
 386:	2d 81       	ldd	r18, Y+5	; 0x05
 388:	2c 93       	st	X, r18
 38a:	27 c0       	rjmp	.+78     	; 0x3da <__stack+0xdb>
		}else{
		OCR2B = log_table[dmx_data[0]];
 38c:	e8 81       	ld	r30, Y
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	e0 50       	subi	r30, 0x00	; 0
 392:	ff 4f       	sbci	r31, 0xFF	; 255
 394:	20 81       	ld	r18, Z
 396:	f6 01       	movw	r30, r12
 398:	20 83       	st	Z, r18
		OCR0B = log_table[dmx_data[1]];
 39a:	e9 81       	ldd	r30, Y+1	; 0x01
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	e0 50       	subi	r30, 0x00	; 0
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
 3a2:	20 81       	ld	r18, Z
 3a4:	28 bd       	out	0x28, r18	; 40
		OCR0A = log_table[dmx_data[2]];
 3a6:	ea 81       	ldd	r30, Y+2	; 0x02
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	e0 50       	subi	r30, 0x00	; 0
 3ac:	ff 4f       	sbci	r31, 0xFF	; 255
 3ae:	20 81       	ld	r18, Z
 3b0:	27 bd       	out	0x27, r18	; 39
		OCR1AL= log_table[dmx_data[3]];
 3b2:	eb 81       	ldd	r30, Y+3	; 0x03
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	e0 50       	subi	r30, 0x00	; 0
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	20 81       	ld	r18, Z
 3bc:	f7 01       	movw	r30, r14
 3be:	20 83       	st	Z, r18
		OCR1BL= log_table[dmx_data[4]];
 3c0:	ec 81       	ldd	r30, Y+4	; 0x04
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	e0 50       	subi	r30, 0x00	; 0
 3c6:	ff 4f       	sbci	r31, 0xFF	; 255
 3c8:	20 81       	ld	r18, Z
 3ca:	f8 01       	movw	r30, r16
 3cc:	20 83       	st	Z, r18
		OCR2A = log_table[dmx_data[5]];
 3ce:	ed 81       	ldd	r30, Y+5	; 0x05
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	e0 50       	subi	r30, 0x00	; 0
 3d4:	ff 4f       	sbci	r31, 0xFF	; 255
 3d6:	20 81       	ld	r18, Z
 3d8:	2c 93       	st	X, r18
		}
		// Commands parsing
		if (dmx_command_available){
 3da:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__data_end>
 3de:	22 23       	and	r18, r18
 3e0:	19 f2       	breq	.-122    	; 0x368 <__stack+0x69>
			dmx_command_available = 0;
 3e2:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
			
			switch (dmx_command[COMMAND_TYPE]){
 3e6:	fc 01       	movw	r30, r24
 3e8:	22 81       	ldd	r18, Z+2	; 0x02
 3ea:	21 30       	cpi	r18, 0x01	; 1
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <__stack+0xf1>
 3ee:	bc cf       	rjmp	.-136    	; 0x368 <__stack+0x69>
				case 0x01:																					// Command to change DMX address
					temp_start_addr = (dmx_command[START_ADDR_HI] << 8) | dmx_command[START_ADDR_LO];		// Extract DMX address from received command data slots
 3f0:	63 81       	ldd	r22, Z+3	; 0x03
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	76 2f       	mov	r23, r22
 3f6:	66 27       	eor	r22, r22
 3f8:	24 81       	ldd	r18, Z+4	; 0x04
 3fa:	62 2b       	or	r22, r18
 3fc:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <temp_start_addr+0x1>
 400:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <temp_start_addr>
			
					if ((temp_start_addr >= DMX_MIN_ADDRESS) && (temp_start_addr <= DMX_MAX_ADDRESS)){		// Validation received DMX address
 404:	9b 01       	movw	r18, r22
 406:	21 50       	subi	r18, 0x01	; 1
 408:	31 09       	sbc	r19, r1
 40a:	21 15       	cp	r18, r1
 40c:	32 40       	sbci	r19, 0x02	; 2
 40e:	08 f0       	brcs	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	ab cf       	rjmp	.-170    	; 0x368 <__stack+0x69>
						dmx_start_addr = temp_start_addr;													// Apply new DMX address
 412:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <dmx_start_addr+0x1>
 416:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <dmx_start_addr>
						eeprom_update_word(&eep_dmx_start_addr, temp_start_addr);							// Store in EEPROM
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	05 d0       	rcall	.+10     	; 0x42a <eeprom_update_word>
 420:	9f cf       	rjmp	.-194    	; 0x360 <__stack+0x61>

00000422 <eeprom_read_word>:
 422:	a8 e1       	ldi	r26, 0x18	; 24
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	42 e0       	ldi	r20, 0x02	; 2
 428:	06 c0       	rjmp	.+12     	; 0x436 <eeprom_read_blraw>

0000042a <eeprom_update_word>:
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	27 2f       	mov	r18, r23
 42e:	11 d0       	rcall	.+34     	; 0x452 <eeprom_update_r18>
 430:	0f c0       	rjmp	.+30     	; 0x450 <eeprom_update_byte>

00000432 <eeprom_read_block>:
 432:	dc 01       	movw	r26, r24
 434:	86 2f       	mov	r24, r22

00000436 <eeprom_read_blraw>:
 436:	e8 2f       	mov	r30, r24
 438:	f9 99       	sbic	0x1f, 1	; 31
 43a:	fe cf       	rjmp	.-4      	; 0x438 <eeprom_read_blraw+0x2>
 43c:	12 bc       	out	0x22, r1	; 34
 43e:	05 c0       	rjmp	.+10     	; 0x44a <eeprom_read_blraw+0x14>
 440:	e1 bd       	out	0x21, r30	; 33
 442:	f8 9a       	sbi	0x1f, 0	; 31
 444:	e3 95       	inc	r30
 446:	00 b4       	in	r0, 0x20	; 32
 448:	0d 92       	st	X+, r0
 44a:	41 50       	subi	r20, 0x01	; 1
 44c:	c8 f7       	brcc	.-14     	; 0x440 <eeprom_read_blraw+0xa>
 44e:	08 95       	ret

00000450 <eeprom_update_byte>:
 450:	26 2f       	mov	r18, r22

00000452 <eeprom_update_r18>:
 452:	f9 99       	sbic	0x1f, 1	; 31
 454:	fe cf       	rjmp	.-4      	; 0x452 <eeprom_update_r18>
 456:	12 bc       	out	0x22, r1	; 34
 458:	81 bd       	out	0x21, r24	; 33
 45a:	f8 9a       	sbi	0x1f, 0	; 31
 45c:	81 50       	subi	r24, 0x01	; 1
 45e:	00 b4       	in	r0, 0x20	; 32
 460:	02 16       	cp	r0, r18
 462:	39 f0       	breq	.+14     	; 0x472 <eeprom_update_r18+0x20>
 464:	1f ba       	out	0x1f, r1	; 31
 466:	20 bd       	out	0x20, r18	; 32
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	fa 9a       	sbi	0x1f, 2	; 31
 46e:	f9 9a       	sbi	0x1f, 1	; 31
 470:	0f be       	out	0x3f, r0	; 63
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
